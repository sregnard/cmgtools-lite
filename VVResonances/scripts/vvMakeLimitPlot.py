#!/usr/bin/env python

import os
import ROOT
from ROOT import gStyle,gROOT,gPad
import math
from CMGTools.VVResonances.plotting.CMS_lumi import *
from CMGTools.VVResonances.plotting.tdrstyle import *

import optparse
parser = optparse.OptionParser()
parser.add_option("-i","--input",dest="input",default='',help="input ROOT file")
parser.add_option("-o","--output",dest="output",default='limitPlot',help="output plot name")
parser.add_option("-x","--minX",dest="minX",type=float,help="minimum x",default=1000.0)
parser.add_option("-X","--maxX",dest="maxX",type=float,help="maximum x",default=4500.0)
parser.add_option("-y","--minY",dest="minY",type=float,help="minimum y",default=0.00004)
parser.add_option("-Y","--maxY",dest="maxY",type=float,help="maximum y",default=2.)
#parser.add_option("-t","--titleX",dest="titleX",default='m_{X} (GeV)',help="title of x axis")
#parser.add_option("-T","--titleY",dest="titleY",default='#sigma #times #bf{#it{#Beta}} (pb)',help="title of y axis")
parser.add_option("-b","--blind",dest="blind",type=int,help="don't draw the observed",default=1)
parser.add_option("-l","--log",dest="log",type=int,help="use log scale",default=1)
parser.add_option("-C","--CMSlabel",dest="CMSlabel",type=int,default=0,help="0:None 1:CMS 2:CMS Preliminary 3:CMS Supplementary")
parser.add_option("-p","--period",dest="period",default='Run2',help="run period, to set the luminosity: 2016, 2017, 2018, or Run2")
parser.add_option("-s","--signal",dest="signal",default='generic',help="which signal: GbuToWW, RadToWW, ZprToWW, WprToWZ, WprToWH, VBFGbuToWW, VBFRadToWW, VBFZprToWW, or VBFWprToWZ")
(options,args) = parser.parse_args()


def saveCanvas(canvas,name):
  canvas.SaveAs(name+".root")
  canvas.SaveAs(name+".C")
  canvas.SaveAs(name+".pdf")
  #canvas.SaveAs(name+".png")
  canvas.SaveAs(name+".eps")
  os.system("convert -density 150 -quality 100 "+name+".eps "+name+".png")
  os.system("rm "+name+".eps")

def cmsLabel(canvas,period):
  if options.CMSlabel==0:
    cmslabel_not(canvas,period,11)
  elif options.CMSlabel==1:
    cmslabel_final(canvas,period,11)
  elif options.CMSlabel==2:
    cmslabel_prelim(canvas,period,11)
  elif options.CMSlabel==3:
    cmslabel_suppl(canvas,period,11)





drawTheo = 1

table_Gbulk_ggF = [
## from https://github.com/CrossSectionsLHC/WED/blob/master/KKGraviton_Bulk/GF_NLO_13TeV_ktilda_0p1.txt and https://github.com/CrossSectionsLHC/WED/blob/master/KKGraviton_Bulk/Decay_long.txt and Decay_short_extended.txt
## and PDF and scale uncertainties come from the Xsec_uncertainty.root file
#    (mG(GeV),25*XS(pb),WW,full(%)(from xsec file, not to be taken),PDF,Scale),
    ( 1000, 25 * 0.0056657071801246945 , 0.24760630932823052, 29.660917045836598, (0.10565+0.14237)/2., (0.0978498+0.124306)/2. ),
    ( 1500, 25 * 0.0005727231501579456 , 0.22005013790397887, 43.337397245335346, (0.165529+0.192089)/2. , (0.134482+0.143518)/2. ),
    ( 1800, 25 * 0.00018315617607742797, 0.21371662932013388, 52.52437529376242 , 0.218125, 0.151284 ),
    ( 2000, 25 * 0.00009062263600103764, 0.21103043636291363, 59.42154491428172 , 0.247751, 0.158533 ),
    ( 2500, 25 * 0.00001868308774736877, 0.20696480536908055, 78.00923022309604 , 0.339052, 0.174824 ),
    ( 3000, 25 * 4.412202866735033e-6  , 0.20478514049527263, 100.51611811048016, 0.450011, 0.189223 ),
    ( 3500, 25 * 1.1518090410508347e-6 , 0.20348064946832398, 127.5113328296744 , 0.589637, 0.202864 ),
    ( 4500, 25 * 8.933087336020322e-8  , 0.2020619221283911 , 198.910055050015  , 1., 0.227372 ),
    #( 5000, 25 * 2.4883397029814656e-8 , 0.201650808621434  , 244.81488925308446,
    #( 6000, 25 * 1.834050541862782e-9  , 0.20111639160218706, 372.01646468940055,
    #( 6500, 25 * 4.6067568192800316e-10, 0.20093700194424224, 464.0208615999931 ,
] 

table_Gbulk_VBF = [
## from https://github.com/CrossSectionsLHC/WED/blob/master/KKGraviton_Bulk/Xjj_VBF_LO_13TeV_ktilda_0p1.txt and https://github.com/CrossSectionsLHC/WED/blob/master/KKGraviton_Bulk/Decay_long.txt and Decay_short_extended.txt
#    (mG(GeV),25*XS(pb),WW,scale(%),pdf(%),alphsS(%),full(%)),
    ( 1000, 25 * 0.0001478238308263867,   0.24760630932823052, 2.287456482192323,  14.323014339640485, 1.4053894029522744e-7,  14.504523326585769 ),
    ( 1100, 25 * 0.0000904776117604224,   0.23871403039326083, 2.3427976193185716, 14.65098623937407,  8.9042987947995e-8,     14.83711894106848  ),
    ( 1200, 25 * 0.000056975255645515407, 0.23212309221977667, 2.3936641050705463, 15.048529781325767, 6.142307532601094e-8,   15.23771230950866  ),
    ( 1300, 25 * 0.00003692438276388664,  0.22709721190943513, 2.4886060388676534, 15.39815629113455,  4.728595818523094e-8,   15.597960673847561 ),
    ( 1400, 25 * 0.000024351052420889357, 0.223173795143857  , 2.5181975696842143, 15.721799685409946, 2.843399942029931e-8,   15.922195336954001 ),
    ( 1500, 25 * 0.00001640641540069989,  0.22005013790397887, 2.604725980510132,  16.071135531510862, 2.4281077098010648e-8,  16.280847481188914 ),
    ( 1600, 25 * 0.000011274675921737518, 0.2175212410002599 , 2.686521421048307,  16.421700182786537, 2.0801785250343632e-8,  16.640001028818563 ),
    ( 1700, 25 * 7.802219659101039e-6,    0.215444149151903  , 2.7376025613439086, 16.70678821129959,  1.5768681119050598e-8,  16.92959657289847  ),
    ( 1800, 25 * 5.486799520511501e-6,    0.21371662932013388, 2.8792055237626486, 16.968444767598854, 1.1824741614841563e-8,  17.210983187462542 ),
    ( 1900, 25 * 3.9196934457848884e-6,   0.2122639525106775 , 2.960221119707719,  17.36577658545259,  1.0165477615642434e-8,  17.616273882220863 ),
    ( 2000, 25 * 2.8161410177497724e-6,   0.21103043636291363, 3.1562866492343438, 17.631967823489145, 1.0145504507725951e-8,  17.912242593843224 ),
    ( 2500, 25 * 5.96167457011135e-7,     0.20696480536908055, 3.7522604583508543, 19.261454056384583, 3.4818068950108418e-9,  19.62353359906206  ),
    ( 3000, 25 * 1.440976398414742e-7,    0.20478514049527263, 5.104859345949913,  21.269516144839784, 1.5389012413605784e-9,  21.87354351671289  ),
    ( 3500, 25 * 3.7653825711302106e-8,   0.20348064946832398, 6.538905668541731,  23.83707424838142,  6.895203630975009e-10,  24.71767375917353  ),
    ( 4000, 25 * 1.0316299054660157e-8,   0.20263791388919516, 8.637900213453092,  27.371131763482264, 3.0277115840712386e-10, 28.701779981587915 ),
    ( 4500, 25 * 2.8801312841217955e-9,   0.2020619221283911 , 11.48920303392293,  32.49386916947251,  1.3391340624516899e-10, 34.465248003713825 ),
    #( 5000, 25 * 8.157049697186479e-10,   0.201650808621434  , 14.76881866497246,  39.65408116753171,  5.408502846893956e-11,  42.31505828898303  ),
    #( 6500, 25 * 1.7145886494769366e-11,  0.20093700194424224, 30.34559251339385,  81.07973536853567,  2.212885901138671e-12,  86.57238862605512  ),
]

table_Rad_ggF = [
## from https://github.com/CrossSectionsLHC/WED/blob/master/Radion_Bulk/GF_NLO_13TeV_LR_3TeV_kl_35.txt and https://github.com/CrossSectionsLHC/WED/blob/master/Radion_Bulk/Decay_long_kl_35_arxiv1110.6452.txt
#    (mR(GeV),XS(pb),WW,pdf(%),scale(%),alphsS(%),full(%)),
    ( 1000, 0.2618915924170746,     0.442426, 5.457813246401432,  9.461100018882036,  5.142083681916819,  12.072330495464405 ),
    ( 1500, 0.054417137017588976,   0.442426, 7.876643121584359,  9.174948346000436,  5.936151340530263,  13.470674695584389 ),
    ( 1800, 0.023912714207366757,   0.442426, 9.487659973079984,  9.38705486619197,   6.786926213475441,  14.973137889328427 ),
    ( 2000, 0.014293231312611458,   0.442426, 10.627588018653636, 9.46256381379635,   7.439673750950244,  16.057225368816884 ),
    ( 2500, 0.004301706042824362,   0.442426, 13.603037287061978, 9.51859123731743,   9.184131264012764,  18.973520222956818 ),
    ( 3000, 0.0013843144368847916,  0.442426, 17.65819910363074,  9.867611264270844,  10.970872527686517, 23.01177506549586  ),
    ( 3500, 0.00046996032032601366, 0.442426, 21.967431417644555, 9.978765498323227,  12.339108505092456, 27.099767575754004 ),
    ( 4500, 0.0000534104307518241,  0.442426, 34.01740559576651,  10.8081513895216,   13.876702883763675, 38.29572956414278  ),
    #( 5000, 0.00001834556207323914, 0.442426, 41.16212439449919,  11.226638835333196, 13.717924742637155, 44.81673084297753  ),
    #( 6000, 1.8601928153904996e-6,  0.442426, 60.77606105818607,  11.831740778170923, 12.958912914750679, 63.258620847456726 ),
    #( 6500, 5.348014604623498e-7,   0.442426, 74.86267151936937,  12.204465133484584, 14.36131370017207,  77.1985484799176   ),
]

table_Rad_VBF = [
## from https://github.com/CrossSectionsLHC/WED/blob/master/Radion_RS1/VBF_HXSWG2016_13TeV_LR_3TeV.txt and https://github.com/CrossSectionsLHC/WED/blob/master/Radion_Bulk/Decay_long_kl_35_arxiv1110.6452.txt
#    (mH(GeV),CrossSection(pb),WW,+QCDScale%,-QCDScale%,(PDF+as)%,+full%,-full%),
    ( 1000., 0.00058713968,           0.442426, 0.3, -0.7, 2.5, 2.5179356624028344, -2.596150997149434  ),
    ( 1050., 0.00050772924,           0.442426, 0.3, -0.7, 2.5, 2.5179356624028344, -2.596150997149434  ),
    ( 1100., 0.000440422,             0.442426, 0.3, -0.8, 2.6, 2.6172504656604803, -2.7202941017470885 ),
    ( 1150., 0.00038313352,           0.442426, 0.3, -0.8, 2.6, 2.6172504656604803, -2.7202941017470885 ),
    ( 1200., 0.0003341828,            0.442426, 0.3, -0.9, 2.7, 2.716615541441225,  -2.8460498941515415 ),
    ( 1250., 0.00029215780000000003,  0.442426, 0.3, -0.9, 2.7, 2.716615541441225,  -2.8460498941515415 ),
    ( 1300., 0.00025598267999999997,  0.442426, 0.3, -0.9, 2.8, 2.8160255680657444, -2.9410882339705484 ),
    ( 1350., 0.00022478332000000001,  0.442426, 0.4, -1. , 2.8, 2.82842712474619,   -2.973213749463701  ),
    ( 1400., 0.00019775284,           0.442426, 0.4, -1. , 2.9, 2.9274562336608896, -3.0675723300355937 ),
    ( 1450., 0.00017428607999999998,  0.442426, 0.4, -1.1, 2.9, 2.9274562336608896, -3.1016124838541645 ),
    ( 1500., 0.00015384512,           0.442426, 0.4, -1.1, 3. , 3.026549190084311,  -3.1953090617340916 ),
    ( 1550., 0.00013602652,           0.442426, 0.5, -1.2, 3. , 3.0413812651491097, -3.2310988842807022 ),
    ( 1600., 0.00012042683999999999,  0.442426, 0.5, -1.2, 3.1, 3.1400636936215167, -3.3241540277189325 ),
    ( 1650., 0.00010677711999999999,  0.442426, 0.5, -1.3, 3.2, 3.23882694814033,   -3.453983207834109  ),
    ( 1700., 0.00009480839999999999,  0.442426, 0.5, -1.3, 3.2, 3.23882694814033,   -3.453983207834109  ),
    ( 1750., 0.00008425172,           0.442426, 0.6, -1.4, 3.3, 3.3541019662496843, -3.584689665786984  ),
    ( 1800., 0.0000749726,            0.442426, 0.6, -1.4, 3.4, 3.4525353003264136, -3.676955262170047  ),
    ( 1850., 0.000066742424,          0.442426, 0.6, -1.5, 3.4, 3.4525353003264136, -3.716180835212409  ),
    ( 1900., 0.00005950067599999999,  0.442426, 0.6, -1.5, 3.5, 3.5510561809129406, -3.8078865529319543 ),
    ( 1950., 0.000053092704,          0.442426, 0.7, -1.6, 3.6, 3.66742416417845,   -3.939543120718442  ),
    ( 2000., 0.000047417648,          0.442426, 0.7, -1.6, 3.6, 3.66742416417845,   -3.939543120718442  ),
    ( 2050., 0.000042381372,          0.442426, 0.7, -1.7, 3.7, 3.7656340767525465, -4.071854614300467  ),
    ( 2100., 0.000037909912,          0.442426, 0.7, -1.7, 3.8, 3.8639358172723313, -4.162931659299729  ),
    ( 2150., 0.000033929304,          0.442426, 0.7, -1.8, 3.9, 3.96232255123179,   -4.295346318982906  ),
    ( 2200., 0.00003039248,           0.442426, 0.8, -1.8, 3.9, 3.9812058474788765, -4.295346318982906  ),
    ( 2250., 0.000027238924,          0.442426, 0.8, -1.9, 4. , 4.079215610874228,  -4.428317965096905  ),
    ( 2300., 0.000024428292,          0.442426, 0.8, -1.9, 4.1, 4.177319714841085,  -4.518849411078001  ),
    ( 2350., 0.000021913516,          0.442426, 0.9, -2. , 4.2, 4.295346318982906,  -4.651881339845203  ),
    ( 2400., 0.0000196677,            0.442426, 0.9, -2. , 4.3, 4.393176527297759,  -4.742362280551751  ),
    ( 2450., 0.000017663948,          0.442426, 0.9, -2.1, 4.4, 4.491102314577124,  -4.8754486972995625 ),
    ( 2500., 0.000015868640000000002, 0.442426, 1. , -2.1, 4.5, 4.6097722286464435, -4.965883607174055  ),
    ( 2550., 0.000014268328000000002, 0.442426, 1. , -2.2, 4.6, 4.707440918375927,  -5.0990195135927845 ),
    ( 2600., 0.000012829392,          0.442426, 1. , -2.2, 4.7, 4.805205510693586,  -5.189412298131649  ),
    ( 2650., 0.000011545108,          0.442426, 1. , -2.3, 4.8, 4.903060268852505,  -5.322593352868505  ),
    ( 2700., 0.00001038858,           0.442426, 1.1, -2.3, 4.9, 5.021951811795889,  -5.412947441089743  ),
    ( 2750., 9.353084e-6,             0.442426, 1.1, -2.4, 5. , 5.119570294468081,  -5.546169849544818  ),
    ( 2800., 8.418448e-6,             0.442426, 1.1, -2.4, 5.1, 5.217278984298233,  -5.63648826841678   ),
    ( 2850., 7.5846720000000005e-6,   0.442426, 1.1, -2.5, 5.3, 5.412947441089743,  -5.860034129593445  ),
    ( 2900., 6.8315839999999995e-6,   0.442426, 1.2, -2.5, 5.4, 5.531726674375733,  -5.950630218724736  ),
    ( 2950., 6.1564944e-6,            0.442426, 1.2, -2.6, 5.5, 5.629387178015028,  -6.0835844697020525 ),
    ( 3000., 5.549317199999999e-6,    0.442426, 1.2, -2.7, 5.7, 5.82494635168428,   -6.307138812488591  ),
]

table_HVT_modelB = [
## from https://github.com/jngadiub/Cross_Sections_HVT/blob/master/13TeV.txt
## and PDF and scale uncertainties come from the Xsec_uncertainty.root file
  #  (M0,M+,g,gv,ch,cq,cl,c3,cvvw,cvvhh,cvvv,total_widthV0GeV,BRWW,BRhZ,BRuu,BRdd,BRll,BRnunu,BRbb,BRtt,total_widthV+GeV,BRZW,BRWGam,BRWh,BRud,BRus,BRlnu,BRtb,CX+(pb),CX0(pb),CX-(pb), PDFWpr, ScaleWpr, PDFZpr, ScaleZpr ),
  #(800.,799.451,0.639063,3.,-0.976243,1.02433,1.02433,1.02433,1.,-0.0240503,0.928159,32.2135,0.413867,0.567236,0.0026168,0.00213216,0.00105988,0.000575241,0.00213199,0.00236208,32.0323,0.428731,0.,0.552862,0.00444545,0.000238453,0.0015613,0.00435527,1.0768,0.855309,0.511085),
  #(900.,899.706,0.640991,3.,-0.976243,1.02433,1.02433,1.02433,1.,-0.0240503,0.928159,33.0689,0.439352,0.534051,0.00355333,0.00315497,0.00133079,0.000932432,0.00315474,0.00323679,32.9689,0.451309,0.,0.522327,0.00634327,0.000340252,0.00222784,0.00631317,0.901251,0.687575,0.409766),
  (1000.,999.813,0.642381,3.,-0.976243,1.02433,1.02433,1.02433,1.,-0.0240503,0.928159,35.0172,0.450586,0.517614,0.0041742,0.00384388,0.00150963,0.00117932,0.00384365,0.00385314,34.9525,0.460359,0.,0.507973,0.00759921,0.00040762,0.00266894,0.0076475,0.687047,0.509804,0.299486, 0.0419527, 0.0400242, 0.0418039, 0.0405841 ),
  #(1100.,1099.87,0.643414,3.,-0.976243,1.02433,1.02433,1.02433,1.,-0.0240503,0.928159,37.3432,0.45685,0.507523,0.00462632,0.0043489,0.00163984,0.00136241,0.00434868,0.00432121,37.2981,0.464974,0.,0.49948,0.00851302,0.000456637,0.00298989,0.00863699,0.512156,0.37177,0.214767),
  (1200.,1199.91,0.644204,3.,-0.976243,1.02433,1.02433,1.02433,1.,-0.0240503,0.928159,39.8605,0.460749,0.500699,0.00496957,0.00473368,0.00173872,0.00150284,0.00473348,0.00468746,39.8275,0.467605,0.,0.493896,0.00920651,0.000493835,0.00323345,0.00939805,0.381432,0.271104,0.153962, 0.0437757, 0.0502532, 0.044492, 0.0506837 ),
  #(1300.,1299.93,0.644819,3.,-0.976243,1.02433,1.02433,1.02433,1.,-0.0240503,0.928159,42.4924,0.463352,0.495803,0.00523735,0.00503455,0.00181591,0.00161311,0.00503436,0.00497972,42.4674,0.469214,0.,0.489978,0.00974748,0.000522853,0.00342344,0.00999762,0.285322,0.198844,0.110992),
  (1400.,1399.95,0.645309,3.,-0.976243,1.02433,1.02433,1.02433,1.,-0.0240503,0.928159,45.2001,0.46518,0.492143,0.00545063,0.00527453,0.00187741,0.00170132,0.00527436,0.00521656,45.1806,0.470248,0.,0.487101,0.0101783,0.000545964,0.00357477,0.0104788,0.214856,0.146961,0.0806679, 0.0460551, 0.058957, 0.0461182, 0.059207 ),
  #(1500.,1499.96,0.645705,3.,-0.976243,1.02433,1.02433,1.02433,1.,-0.0240503,0.928159,47.9612,0.466514,0.489321,0.00562337,0.00546911,0.00192725,0.00177299,0.00546895,0.00541101,47.9457,0.470938,0.,0.484915,0.0105273,0.000564684,0.00369734,0.0108708,0.162942,0.109482,0.0591312),
  (1600.,1599.96,0.646029,3.,-0.976243,1.02433,1.02433,1.02433,1.,-0.0240503,0.928159,50.7617,0.467518,0.487091,0.00576529,0.00562908,0.00196821,0.00183201,0.00562894,0.00557251,50.7492,0.471413,0.,0.48321,0.0108141,0.000580064,0.00379804,0.0111944,0.124438,0.0822156,0.0437098, 0.0483122, 0.0666744, (0.0461182+0.0519441)/2, (0.059207+0.0737932)/2 ),
  #(1700.,1699.97,0.646299,3.,-0.976243,1.02433,1.02433,1.02433,1.,-0.0240503,0.928159,53.5925,0.468293,0.485295,0.00588331,0.0057622,0.00200229,0.00188118,0.00576207,0.00570801,53.5821,0.471749,0.,0.481851,0.0110525,0.000592855,0.00388179,0.0114646,0.0956578,0.0622015,0.0325698),
  (1800.,1799.98,0.646525,3.,-0.976243,1.02433,1.02433,1.02433,1.,-0.0240503,0.928159,56.4469,0.468904,0.483825,0.00598252,0.00587415,0.00203094,0.00192257,0.00587403,0.00582274,56.4383,0.471991,0.,0.480747,0.011253,0.000603609,0.0039522,0.0116924,0.0739789,0.0473673,0.0244536, 0.0509453, 0.0739624, 0.0519441, 0.0737932 ),
  #(1900.,1899.98,0.646716,3.,-0.976243,1.02433,1.02433,1.02433,1.,-0.0240503,0.928159,59.3204,0.469395,0.482604,0.0060667,0.00596919,0.00205525,0.00195774,0.00596908,0.00592071,59.3132,0.472168,0.,0.479838,0.0114231,0.000612735,0.00401196,0.0118863,0.0575243,0.036303,0.0184817),
  (2000.,1999.98,0.646879,3.,-0.976243,1.02433,1.02433,1.02433,1.,-0.0240503,0.928159,62.2095,0.469796,0.481578,0.00613876,0.00605055,0.00207607,0.00198786,0.00605045,0.00600498,62.2033,0.472301,0.,0.479079,0.0115688,0.000620547,0.00406311,0.0120526,0.0449418,0.0279823,0.0140562, 0.0543189, 0.0807293, 0.0556983, 0.080057 ),
  #(2100.,2099.99,0.64702,3.,-0.976243,1.02433,1.02433,1.02433,1.,-0.0240503,0.928159,65.1114,0.470127,0.480707,0.0062009,0.00612074,0.00209403,0.00201387,0.00612064,0.00607799,65.1061,0.472401,0.,0.478438,0.0116944,0.000627284,0.00410722,0.0121963,0.035265,0.02168,0.0107528),
  #(2200.,2199.99,0.647142,3.,-0.976243,1.02433,1.02433,1.02433,1.,-0.0240503,0.928159,68.0242,0.470404,0.479961,0.00625486,0.0061817,0.00210962,0.00203646,0.00618161,0.00614162,68.0196,0.472477,0.,0.477892,0.0118035,0.000633135,0.00414553,0.0123213,0.0277791,0.0168765,0.0082689),
  #(2300.,2299.99,0.647249,3.,-0.976243,1.02433,1.02433,1.02433,1.,-0.0240503,0.928159,70.9462,0.470638,0.479317,0.00630202,0.00623498,0.00212325,0.00205622,0.0062349,0.00619741,70.9422,0.472536,0.,0.477422,0.0118988,0.000638248,0.00417901,0.0124307,0.021956,0.0131933,0.00638847),
  #(2400.,2399.99,0.647342,3.,-0.976243,1.02433,1.02433,1.02433,1.,-0.0240503,0.928159,73.8761,0.470839,0.478756,0.00634347,0.00628182,0.00213524,0.00207359,0.00628175,0.00624659,73.8726,0.472582,0.,0.477015,0.0119826,0.000642743,0.00420844,0.012527,0.0174056,0.0103538,0.00495788),
  (2500.,2499.99,0.647425,3.,-0.976243,1.02433,1.02433,1.02433,1.,-0.0240503,0.928159,76.8129,0.471011,0.478265,0.00638009,0.00632321,0.00214582,0.00208895,0.00632315,0.00629015,76.8098,0.472619,0.,0.476659,0.0120566,0.000646715,0.00423445,0.0126121,0.013834,0.00815289,0.00387631, 0.0655156, 0.0967945, 0.0654123, 0.0945563 ),
  #(2600.,2599.99,0.647498,3.,-0.976243,1.02433,1.02433,1.02433,1.,-0.0240503,0.928159,79.7555,0.47116,0.477833,0.00641261,0.00635997,0.00215523,0.00210259,0.00635991,0.00632891,79.7528,0.472647,0.,0.476347,0.0121224,0.000650242,0.00425754,0.0126878,0.01102,0.00644032,0.00302043),
  #(2700.,2699.99,0.647563,3.,-0.976243,1.02433,1.02433,1.02433,1.,-0.0240503,0.928159,82.7034,0.47129,0.477449,0.00644161,0.00639276,0.00216361,0.00211476,0.0063927,0.00636355,82.701,0.47267,0.,0.476071,0.012181,0.000653387,0.00427813,0.0127554,0.00879738,0.0051021,0.00236942),
  #(2800.,2799.99,0.647622,3.,-0.976243,1.02433,1.02433,1.02433,1.,-0.0240503,0.928159,85.6559,0.471405,0.477109,0.00646759,0.00642213,0.00217112,0.00212566,0.00642207,0.00639464,85.6538,0.472688,0.,0.475827,0.0122335,0.000656205,0.00429658,0.012816,0.00703223,0.00405245,0.00186407),
  #(2900.,2899.99,0.647674,3.,-0.976243,1.02433,1.02433,1.02433,1.,-0.0240503,0.928159,88.6125,0.471506,0.476804,0.00649095,0.00644854,0.00217788,0.00213547,0.00644849,0.00642263,88.6106,0.472703,0.,0.475608,0.0122808,0.000658738,0.00431317,0.0128705,0.00562985,0.00323048,0.00147046),
  (3000.,3000.,0.647721,3.,-0.976243,1.02433,1.02433,1.02433,1.,-0.0240503,0.928159,91.5727,0.471596,0.47653,0.00651203,0.00647237,0.00218398,0.00214432,0.00647232,0.00644792,91.571,0.472715,0.,0.475412,0.0123234,0.000661024,0.00432814,0.0129197,0.00451288,0.00257265,0.00116241, 0.0846863, 0.11186, 0.0793234, 0.107215 ),
  #(3100.,3100.,0.647764,3.,-0.976243,1.02433,1.02433,1.02433,1.,-0.0240503,0.928159,94.5362,0.471677,0.476283,0.00653111,0.00649395,0.0021895,0.00215233,0.0064939,0.00647085,94.5346,0.472724,0.,0.475236,0.012362,0.000663095,0.00434169,0.0129643,0.00362067,0.00205583,0.000921187),
  #(3200.,3200.,0.647803,3.,-0.976243,1.02433,1.02433,1.02433,1.,-0.0240503,0.928159,97.5026,0.471748,0.47606,0.00654845,0.00651355,0.00219451,0.00215961,0.00651351,0.0064917,97.5012,0.472732,0.,0.475077,0.012397,0.000664975,0.00435401,0.0130048,0.00290702,0.00164562,0.000731461),
  #(3300.,3300.,0.647839,3.,-0.976243,1.02433,1.02433,1.02433,1.,-0.0240503,0.928159,100.472,0.471813,0.475857,0.00656424,0.00653141,0.00219908,0.00216625,0.00653137,0.00651072,100.47,0.472738,0.,0.474933,0.012429,0.000666688,0.00436522,0.0130417,0.0023356,0.00131918,0.000581736),
  #(3400.,3400.,0.647871,3.,-0.976243,1.02433,1.02433,1.02433,1.,-0.0240503,0.928159,103.443,0.471872,0.475673,0.00657867,0.00654773,0.00220325,0.00217231,0.00654769,0.00652811,103.442,0.472743,0.,0.474802,0.0124582,0.000668253,0.00437547,0.0130755,0.00187714,0.00105885,0.000463361),
  (3500.,3500.,0.647901,3.,-0.976243,1.02433,1.02433,1.02433,1.,-0.0240503,0.928159,106.417,0.471925,0.475504,0.00659188,0.00656268,0.00220707,0.00217787,0.00656264,0.00654405,106.416,0.472748,0.,0.474682,0.0124849,0.000669687,0.00438486,0.0131064,0.00150893,0.000850838,0.000369561, 0.118175, 0.125904, 0.101825, 0.119058 ),
  #(3600.,3600.,0.647928,3.,-0.976243,1.02433,1.02433,1.02433,1.,-0.0240503,0.928159,109.392,0.471973,0.47535,0.00660402,0.0065764,0.00221058,0.00218297,0.00657637,0.0065587,109.391,0.472751,0.,0.474573,0.0125094,0.000671003,0.00439348,0.0131348,0.00121305,0.000684318,0.000295015),
  #(3700.,3700.,0.647953,3.,-0.976243,1.02433,1.02433,1.02433,1.,-0.0240503,0.928159,112.37,0.472017,0.475209,0.00661519,0.00658904,0.00221382,0.00218766,0.006589,0.00657219,112.369,0.472754,0.,0.474473,0.012532,0.000672215,0.00440141,0.013161,0.000975141,0.000550813,0.000235716),
  #(3800.,3800.,0.647976,3.,-0.976243,1.02433,1.02433,1.02433,1.,-0.0240503,0.928159,115.349,0.472058,0.475078,0.00662549,0.00660069,0.0022168,0.00219199,0.00660066,0.00658465,115.348,0.472756,0.,0.474381,0.0125529,0.000673333,0.00440873,0.0131851,0.000783596,0.000443641,0.000188334),
  #(3900.,3900.,0.647997,3.,-0.976243,1.02433,1.02433,1.02433,1.,-0.0240503,0.928159,118.33,0.472095,0.474958,0.00663502,0.00661146,0.00221955,0.002196,0.00661143,0.00659617,118.329,0.472758,0.,0.474296,0.0125721,0.000674366,0.0044155,0.0132074,0.000629536,0.000357546,0.000150705),
  (4000.,4000.,0.648017,3.,-0.976243,1.02433,1.02433,1.02433,1.,-0.0240503,0.928159,121.312,0.472129,0.474847,0.00664384,0.00662144,0.0022221,0.00219971,0.00662142,0.00660685,121.311,0.472759,0.,0.474217,0.01259,0.000675323,0.00442176,0.0132281,0.000505512,0.000288261,0.000120638, 0.18496, 0.137632, 0.133784, 0.129751 ),
  (4500.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,0.,1.,0.,0.,0.,0.,0.,0.,0.,0.,1.,0.,1.,0.,0.,0.,0.,0.000105,0.000048,0., 0.307965, 0.145058, 0.178196, 0.138699 ),
]

table_HVT_modelC = [
## from https://github.com/zucchett/HVT/blob/master/dataframe.csv
#  (,M,Zprime_cH1,Wprime_cH1,WprimeToWZ,WprimeToWH,ZprimeToWW,ZprimeToZH,Zprime_cH3,Wprime_cH3,Zprime Up,Zprime Down,Wprime Up,Wprime Down,Zprime3 Up,Zprime3 Down,Wprime3 Up,Wprime3 Down,BrWprimeToWZ,BrWprimeToWH,BrZprimeToWW,BrZprimeToZH),
  #(0,800,0.00335214095827,0.00576820621117,0.002831,0.002806,0.001594,0.001679,0.0611308105906,0.105158005753,12.2,-10.1,12.4,-10.2,12.0,-9.91,12.4,-10.2,0.49079382677370886,0.4864597237467421,0.47551699640418593,0.5008739253215986),
  #(1,900,0.00186232875723,0.00325979156031,0.001608,0.001594,0.0008967,0.0009286,0.0263476814859,0.0459061285385,13.2,-10.7,13.4,-10.9,13.1,-10.6,13.5,-10.9,0.49328307354936596,0.4889883204214485,0.4814939341503474,0.49862302581912865),
  (2,1000,0.00109449098554,0.00194842443112,0.0009578,0.0009514,0.0005243,0.0005429,0.0136345370479,0.0242792579509,14.2,-11.4,14.4,-11.5,14.3,-11.5,14.3,-11.5,0.4915766732864431,0.488291968014953,0.47903546664783253,0.4960296678296935),
  (3,1100,0.000670194451768,0.00120755277039,0.0005929,0.0005877,0.0003227,0.0003309,0.00775401362851,0.0139805872432,15.2,-12.1,15.2,-12.0,15.2,-12.1,15.1,-12.0,0.49099303528450583,0.4866868052567112,0.4815020463817693,0.4937373013564533),
  (4,1200,0.000422648218213,0.000766012049364,0.0003773,0.000376,0.0002048,0.0002096,0.00466152188327,0.00843120589115,16.2,-12.7,16.0,-12.6,16.2,-12.7,16.0,-12.6,0.4925509987907663,0.49085389754923964,0.4845637368729848,0.4959206994559454),
  (5,1300,0.000274412524474,0.000505144361844,0.0002479,0.0002465,0.0001329,0.0001353,0.00291873176802,0.00537370604938,16.9,-13.2,16.8,-13.1,17.0,-13.2,16.8,-13.1,0.49075080061282983,0.4879793156557585,0.4843073407627646,0.49305329725509445),
  (6,1400,0.000181978261981,0.000337240298027,0.0001658,0.0001644,8.839e-05,8.962e-05,0.00188347241478,0.00349315265899,17.8,-13.7,17.7,-13.7,17.8,-13.7,17.6,-13.6,0.49163756813761855,0.4874862255839837,0.48571735457737597,0.4924764036341717),
  (7,1500,0.000123798594135,0.000230295678205,0.0001127,0.0001121,6.002e-05,6.076e-05,0.00125701243398,0.00233220970705,18.6,-14.3,18.4,-14.1,18.5,-14.2,18.3,-14.0,0.4893708856302504,0.4867655393003644,0.4848197220604083,0.4907971728155683),
  (8,1600,8.36698595519e-05,0.000159390327683,7.823e-05,7.805e-05,4.112e-05,4.182e-05,0.000835898255598,0.00158962735947,19.3,-14.7,19.0,-14.5,19.3,-14.7,19.1,-14.5,0.49080769916971406,0.48967839601426794,0.49145534867897644,0.49982156327224697),
  (9,1700,5.86705176046e-05,0.000112025315766,5.489e-05,5.488e-05,2.875e-05,2.912e-05,0.000578757460123,0.00110429964323,20.0,-15.1,19.7,-14.9,20.1,-15.1,19.7,-14.9,0.4899785340900531,0.4898892685527804,0.4900246524797301,0.4963310567029474),
  (10,1800,4.17260274434e-05,7.95655277284e-05,3.922e-05,3.906e-05,2.033e-05,2.055e-05,0.000407289735297,0.000776269692378,21.0,-15.7,20.5,-15.4,20.9,-15.6,20.5,-15.4,0.49292703913030006,0.49091611801197144,0.4872258694546703,0.49249835795836083),
  (11,1900,3.00158991307e-05,5.73976314323e-05,2.818e-05,2.803e-05,1.456e-05,1.467e-05,0.000290530559547,0.000553640004607,21.4,-16.0,21.1,-15.8,21.6,-16.1,21.3,-15.8,0.49096102568688854,0.48834767743092566,0.4850762569730306,0.48874098144192024),
  (12,2000,2.15525458828e-05,4.1642360541e-05,2.048e-05,2.037e-05,1.049e-05,1.057e-05,0.000206766286316,0.00039976894131,22.2,-16.4,21.9,-16.2,22.3,-16.5,21.8,-16.2,0.4918068940841122,0.4891653531490901,0.4867174419691893,0.49042930043987903),
  (13,2100,1.55076531692e-05,3.05303298169e-05,1.494e-05,1.492e-05,7.623e-06,7.681e-06,0.000147934714023,0.000291050583555,23.0,-16.9,22.6,-16.6,23.1,-16.9,22.7,-16.7,0.48934944658639074,0.48869436031251334,0.4915637406142254,0.495303829418584),
  (14,2200,1.1520675143e-05,2.24666926661e-05,1.103e-05,1.101e-05,5.578e-06,5.617e-06,0.000109309200519,0.000213347272218,23.6,-17.2,23.1,-17.0,23.7,-17.3,23.1,-16.9,0.49094898674797693,0.4900587800630305,0.4841730133662532,0.48755823163826534),
  (15,2300,8.41211891666e-06,1.6671746976e-05,8.202e-06,8.13e-06,4.117e-06,4.155e-06,7.94391936249e-05,0.000157405862963,24.4,-17.6,23.7,-17.3,24.3,-17.6,23.8,-17.3,0.4919700384013314,0.4876513548162429,0.48941295775626514,0.4939302500552057),
  (16,2400,6.26225801044e-06,1.2492422648e-05,6.101e-06,6.1e-06,3.057e-06,3.077e-06,5.8898716152e-05,0.000117555226958,25.0,-18.0,24.5,-17.7,25.1,-18.0,24.5,-17.7,0.4883760477777905,0.4882959992533228,0.48816257568812765,0.49135631187189033),
  (17,2500,4.67833733913e-06,9.32843155036e-06,4.577e-06,4.573e-06,2.277e-06,2.295e-06,4.38418247677e-05,8.73432546436e-05,25.7,-18.4,25.1,-18.1,25.7,-18.4,25.1,-18.1,0.4906505424079964,0.49022174577928057,0.4867113752048156,0.49055889595742286),
  (18,2600,3.51587284361e-06,7.06766861142e-06,3.462e-06,3.461e-06,1.707e-06,1.716e-06,3.2845744262e-05,6.60108027393e-05,26.4,-18.8,25.7,-18.4,26.4,-18.8,25.7,-18.4,0.4898362091292835,0.4896947197563403,0.4855124391379581,0.4880722586764711),
  (19,2700,2.64482223267e-06,5.35917490828e-06,2.613e-06,2.619e-06,1.289e-06,1.297e-06,2.46372925513e-05,4.99169754047e-05,27.0,-19.1,26.4,-18.8,27.1,-19.2,26.4,-18.8,0.4875750548769883,0.48869463020391596,0.4873673489574115,0.49039212691835743),
  (20,2800,1.99506254108e-06,4.06464762764e-06,2.002e-06,2.005e-06,9.778e-07,9.792e-07,1.85400015557e-05,3.77676558362e-05,27.7,-19.5,26.9,-19.1,27.7,-19.5,27.0,-19.1,0.49253962050392874,0.4932776918633252,0.49010994886941306,0.49081168125683095),
  (21,2900,1.50168543942e-06,3.12179745441e-06,1.53e-06,1.516e-06,7.345e-07,7.375e-07,1.39248599598e-05,2.8947634578e-05,28.6,-20.0,27.5,-19.4,28.5,-19.9,27.6,-19.5,0.4901022639500999,0.48561766807081796,0.48911708185949243,0.4911148371291704),
  (22,3000,1.14402832582e-06,2.38904785731e-06,1.17e-06,1.168e-06,5.644e-07,5.657e-07,1.05861164826e-05,2.21047632341e-05,29.3,-20.3,28.2,-19.8,29.1,-20.3,28.2,-19.8,0.48973485249365695,0.48889769889965073,0.4933444279847333,0.49448076348505254),
  (23,3100,8.8078270161e-07,1.84098965833e-06,9.007e-07,8.969e-07,4.305e-07,4.32e-07,8.13651149062e-06,1.7011511057e-05,29.9,-20.7,28.8,-20.1,29.8,-20.6,28.8,-20.1,0.48924772386665316,0.48718361667147914,0.4887698171331937,0.49047284785491213),
  (24,3200,6.74065160672e-07,1.41554138005e-06,6.934e-07,6.959e-07,3.307e-07,3.323e-07,6.21739136909e-06,1.30496025107e-05,30.5,-21.0,29.5,-20.4,30.5,-20.9,29.6,-20.5,0.48984791951154943,0.49161402824933265,0.4906053884617226,0.49297904622265015),
  (25,3300,5.18408712937e-07,1.0957279145e-06,5.36e-07,5.37e-07,2.531e-07,2.539e-07,4.77381459882e-06,1.00888246553e-05,31.4,-21.4,30.1,-20.8,31.2,-21.3,30.2,-20.8,0.4891725335340994,0.490085168857857,0.4882248189195813,0.4897680028592718),
  (26,3400,3.97415187365e-07,8.47581221058e-07,4.145e-07,4.151e-07,1.944e-07,1.954e-07,3.65533320968e-06,7.78851287977e-06,31.8,-21.6,31.0,-21.2,31.9,-21.7,30.7,-21.1,0.4890386781842537,0.4897465749439896,0.4891609736631838,0.49167723381577216),
  (27,3500,3.06435618507e-07,6.58558632165e-07,3.232e-07,3.228e-07,1.5e-07,1.506e-07,2.81458500893e-06,6.0480360706e-06,32.6,-22.0,31.5,-21.5,32.6,-22.1,31.4,-21.4,0.4907687549967808,0.490161367923765,0.4894992322720914,0.49145722920117985),
  (28,3600,2.37364447786e-07,5.10973443295e-07,2.521e-07,2.497e-07,1.157e-07,1.163e-07,2.17753300542e-06,4.68950288981e-06,33.2,-22.3,32.0,-21.8,33.2,-22.3,32.0,-21.8,0.49337202022543325,0.48867510293649624,0.48743609701951374,0.4899638555174542),
  (29,3700,1.83653459472e-07,4.00391464571e-07,1.958e-07,1.951e-07,8.982e-08,9.001e-08,1.6830079481e-06,3.66708558433e-06,34.1,-22.8,32.7,-22.1,34.1,-22.7,32.8,-22.1,0.48902141360528295,0.48727312458830796,0.48907328104916015,0.4901078382012347),
  (30,3800,1.42689307488e-07,3.13341526941e-07,1.53e-07,1.527e-07,6.935e-08,6.975e-08,1.30208521349e-06,2.8685945077e-06,34.6,-23.0,33.5,-22.5,34.8,-23.1,33.5,-22.5,0.48828510377690487,0.4873276820047933,0.4860210005983262,0.4888242940408544),
  (31,3900,1.1033643238e-07,2.43431597823e-07,1.193e-07,1.189e-07,5.38e-08,5.403e-08,1.00942510275e-06,2.22668386163e-06,35.5,-23.4,34.0,-22.7,35.4,-23.4,34.0,-22.7,0.4900760668166975,0.4884328947569601,0.4875995973361922,0.48968413093075214),
  (32,4000,8.56162796843e-08,1.90356778677e-07,9.38e-08,9.367e-08,4.194e-08,4.185e-08,7.82586347571e-07,1.73977182065e-06,36.1,-23.7,34.8,-23.1,36.0,-23.7,34.8,-23.1,0.49275891645109804,0.4920759883152916,0.48986010785155387,0.4888089059033746),
  (33,4100,6.63019594011e-08,1.49054288185e-07,7.31e-08,7.292e-08,3.248e-08,3.251e-08,6.04799778209e-07,1.36005372468e-06,36.9,-24.1,35.3,-23.3,36.9,-24.1,35.3,-23.4,0.49042534025771406,0.489217726560773,0.4898799416094048,0.49033241692493074),
  (34,4200,5.13828466873e-08,1.17209270735e-07,5.733e-08,5.731e-08,2.521e-08,2.526e-08,4.6900336306e-07,1.06885907434e-06,37.6,-24.4,36.1,-23.8,37.7,-24.4,36.1,-23.8,0.4891251318303836,0.4889544968637587,0.49063066033340286,0.4916037477200221),
  (35,4300,3.98845198405e-08,9.1582054131e-08,4.49e-08,4.48e-08,1.953e-08,1.961e-08,3.63807348708e-07,8.35238763426e-07,38.4,-24.8,36.8,-24.1,38.2,-24.7,36.8,-24.1,0.4902707241723857,0.4891788071920463,0.48966366094167246,0.49166945166749604),
  (36,4400,3.10711145977e-08,7.20508239141e-08,3.53e-08,3.513e-08,1.514e-08,1.519e-08,2.83233748372e-07,6.56725022193e-07,39.2,-25.2,37.5,-24.4,39.0,-25.1,37.5,-24.4,0.4899319408489367,0.4875724952414489,0.4872692916243409,0.4888785032875653),
  (37,4500,2.41115422606e-08,5.58709763831e-08,2.76e-08,2.763e-08,1.18e-08,1.185e-08,2.19665686883e-07,5.09013471227e-07,39.8,-25.4,38.1,-24.7,39.7,-25.4,38.1,-24.7,0.49399530465962144,0.4945322560777297,0.4893921704577998,0.4914658660953329),
  #(38,4600,1.87245781882e-08,4.42582098647e-08,2.171e-08,2.179e-08,9.181e-09,9.25e-09,1.70514590738e-07,4.02974019882e-07,40.6,-25.8,38.8,-25.0,40.5,-25.7,38.9,-25.1,0.4905304590124357,0.4923380332510812,0.4903181213334757,0.49400311756177434),
  #(39,4700,1.45913050462e-08,3.49124193215e-08,1.7e-08,1.708e-08,7.131e-09,7.136e-09,1.32807141841e-07,3.17681355123e-07,41.3,-26.1,39.5,-25.3,41.3,-26.1,39.6,-25.3,0.486932739992927,0.48922418818112906,0.48871570962441907,0.48905837945307173),
  #(40,4800,1.1363496292e-08,2.72155281579e-08,1.337e-08,1.328e-08,5.567e-09,5.583e-09,1.02977399869e-07,2.47398407899e-07,42.1,-26.5,40.3,-25.7,42.1,-26.5,40.3,-25.7,0.49126366104047176,0.4879567254014559,0.48990203868145904,0.491310056037109),
  #(41,4900,8.79999896428e-09,2.14473084508e-08,1.054e-08,1.049e-08,4.324e-09,4.335e-09,8.00177300813e-08,1.94964806406e-07,42.6,-26.7,40.8,-25.9,42.7,-26.7,40.8,-25.9,0.4914369569579651,0.48910566209573564,0.4913636941949098,0.492613694342029),
  #(42,5000,6.83626872445e-09,1.68032505289e-08,8.233e-09,8.249e-09,3.357e-09,3.364e-09,6.21389521783e-08,1.52734674179e-07,43.6,-27.1,41.5,-26.2,43.7,-27.1,41.5,-26.2,0.4899647235420325,0.49091692025971406,0.49105734945638513,0.4920812998425021),
  #(43,5100,5.30491238542e-09,1.31300813694e-08,6.437e-09,6.526e-09,2.603e-09,2.608e-09,4.82003983264e-08,1.19279409755e-07,44.4,-27.4,42.2,-26.5,44.5,-27.5,42.2,-26.5,0.4902482946527352,0.49702662279070214,0.4906772837858877,0.49161980642089714),
  #(44,5200,4.14562333735e-09,1.03455206541e-08,5.068e-09,5.08e-09,2.022e-09,2.031e-09,3.76533951109e-08,9.39561539722e-08,45.1,-27.7,43.3,-27.0,45.1,-27.7,43.3,-27.0,0.4898738468026273,0.4910337690918205,0.48774329828346624,0.4899142625191494),
  #(45,5300,3.22356752644e-09,8.14541302043e-09,3.964e-09,3.98e-09,1.563e-09,1.564e-09,2.92691041467e-08,7.39487545919e-08,46.2,-28.2,43.9,-27.2,46.2,-28.2,43.8,-27.2,0.4866542666477014,0.4886185623758455,0.4848665297624849,0.4851767450726336),
  #(46,5400,2.47606095599e-09,6.36799649208e-09,3.112e-09,3.119e-09,1.213e-09,1.218e-09,2.24751831193e-08,5.77917981942e-08,46.8,-28.4,44.7,-27.6,46.9,-28.5,44.9,-27.7,0.488693736541855,0.4897929833785494,0.48989100896953,0.4919103453626442),
  #(47,5500,1.9020218505e-09,4.96919329107e-09,2.436e-09,2.449e-09,9.37e-10,9.384e-10,1.72587938795e-08,4.50858495975e-08,47.7,-28.8,45.4,-27.8,47.7,-28.8,45.3,-27.8,0.49022041553055873,0.49283653433265123,0.49263366756469346,0.4933697264063056),
  #(48,5600,1.47409781487e-09,3.89334531319e-09,1.905e-09,1.907e-09,7.257e-10,7.296e-10,1.33718798372e-08,3.52613426549e-08,48.7,-29.2,46.1,-28.1,48.8,-29.2,46.1,-28.2,0.4892964396315374,0.48981013668101936,0.49230111643846314,0.4949468024714107),
  #(49,5700,1.14465543771e-09,3.03508316609e-09,1.498e-09,1.493e-09,5.554e-10,5.635e-10,1.0380181257e-08,2.751515128e-08,49.5,-29.5,47.3,-28.6,49.5,-29.5,47.1,-28.6,0.49356143407754627,0.49191403276220064,0.4852115158000161,0.4922878810826595),
  #(50,5800,8.83375103968e-10,2.38523640063e-09,1.168e-09,1.163e-09,4.31e-10,4.307e-10,8.00900133984e-09,2.16236585511e-08,50.4,-29.8,47.9,-28.9,50.4,-29.8,47.9,-28.9,0.4896789264542091,0.4875826981731551,0.4879014566564159,0.48756185007405645),
  #(51,5900,6.78686534398e-10,1.85359697651e-09,9.098e-10,9.067e-10,3.306e-10,3.315e-10,6.15173396435e-09,1.6799796565e-08,51.2,-30.1,48.6,-29.2,51.2,-30.2,48.7,-29.2,0.4908294583610051,0.4891570343986847,0.48711737045622194,0.4884434613013841),
  #(52,6000,5.23698956022e-10,1.44235683621e-09,7.04e-10,7.108e-10,2.546e-10,2.564e-10,4.74557716921e-09,1.30723476879e-08,52.1,-30.5,49.4,-29.5,52.2,-30.5,49.4,-29.5,0.4880900359233304,0.4928045419521352,0.4861571654332351,0.48959425458398076),
  #(53,6100,4.00659484173e-10,1.12519537514e-09,5.489e-10,5.51e-10,1.964e-10,1.967e-10,3.62988284403e-09,1.01934602677e-08,53.0,-30.8,50.1,-29.8,53.0,-30.8,50.2,-29.8,0.48782639186701626,0.4896927344119619,0.4901918156396288,0.49094058114213335),
  #(54,6200,3.07133169262e-10,8.76908183849e-10,4.292e-10,4.264e-10,1.502e-10,1.501e-10,2.78204666945e-09,7.941544075e-09,54.4,-31.3,51.3,-30.2,54.3,-31.3,51.3,-30.2,0.4894469089296428,0.48625387224510647,0.4890386810415513,0.48871308937641045),
  #(55,6300,2.34901646553e-10,6.75855353667e-10,3.344e-10,3.338e-10,1.151e-10,1.157e-10,2.12678652784e-09,6.1197505584e-09,55.3,-31.7,52.0,-30.5,55.1,-31.6,52.1,-30.5,0.4947804262933484,0.4938926623705732,0.4899923082234777,0.49254656873550284),
  #(56,6400,1.77993057422e-10,5.25496916688e-10,2.586e-10,2.584e-10,8.73e-11,8.754e-11,1.61161786298e-09,4.75665084743e-09,56.0,-31.9,53.0,-30.9,56.0,-32.0,53.0,-30.9,0.49210564665127615,0.49172505450382736,0.49046856806904704,0.49181693526648773),
  #(57,6500,1.35922067457e-10,4.05654085943e-10,1.996e-10,1.986e-10,6.658e-11,6.683e-11,1.23054697282e-09,3.66728592423e-09,57.0,-32.3,53.7,-31.1,57.1,-32.3,53.8,-31.1,0.49204484046056557,0.4895796859492401,0.4898395179359901,0.49167880720429885),
  #(58,6600,1.03815118579e-10,3.13819823466e-10,1.54e-10,1.539e-10,5.049e-11,5.072e-11,9.39647553921e-10,2.84012224852e-09,58.1,-32.7,54.6,-31.5,58.0,-32.6,54.6,-31.4,0.490727444490723,0.4904087903059887,0.4863453482604147,0.4885608251885172),
  #(59,6700,7.80489746488e-11,2.41984891792e-10,1.18e-10,1.185e-10,3.847e-11,3.86e-11,7.06312277504e-10,2.18964507216e-09,59.0,-33.0,55.8,-31.9,58.9,-33.0,55.8,-31.9,0.48763374905830004,0.48969999375769957,0.49289564882953235,0.4945612696859878),
  #(60,6800,5.9431449348e-11,1.86567145453e-10,9.102e-11,9.12e-11,2.906e-11,2.915e-11,5.37783191175e-10,1.68832225397e-09,60.3,-33.5,56.4,-32.1,60.3,-33.4,56.4,-32.1,0.4878672489681725,0.4888320490650114,0.4889667056551084,0.49048105539732995),
  #(61,6900,4.4801969753e-11,1.43483969113e-10,7.002e-11,6.991e-11,2.2e-11,2.203e-11,4.05317296969e-10,1.29804292606e-09,61.7,-33.9,57.6,-32.5,61.5,-33.8,57.5,-32.5,0.48799876692047833,0.4872321307542222,0.49104983823901743,0.49171945165479786),
  #(62,7000,3.34925492399e-11,1.09241160929e-10,5.379e-11,5.372e-11,1.644e-11,1.653e-11,3.0288855252e-10,9.86456432661e-10,62.4,-34.1,58.7,-32.9,62.4,-34.2,58.7,-32.9,0.49239681766985405,0.4917560335605979,0.4908554401829428,0.4935426050014626),
  #(63,7100,2.50637446285e-11,8.32704253702e-11,4.084e-11,4.114e-11,1.229e-11,1.237e-11,2.26680002799e-10,7.53060574417e-10,63.6,-34.5,59.7,-33.3,63.6,-34.6,59.6,-33.2,0.49045023870642335,0.4940529583835028,0.4903497135868929,0.49354157502602647),
  #(64,7200,1.87444702212e-11,6.33115254415e-11,3.139e-11,3.14e-11,9.216e-12,9.261e-12,1.69514230816e-10,5.72481552707e-10,64.8,-34.9,60.6,-33.6,64.8,-34.9,60.6,-33.6,0.4958023010992594,0.4959602502235344,0.4916650025977636,0.49406571061826043),
  #(65,7300,1.39228675573e-11,4.82837853128e-11,2.371e-11,2.382e-11,6.864e-12,6.917e-12,1.2588578804e-10,4.36549258318e-10,66.2,-35.3,61.8,-34.0,66.0,-35.3,61.7,-33.9,0.49105512018989317,0.4933333177108079,0.4930018885657708,0.49680857564240044),
  #(66,7400,1.03566443174e-11,3.6573983902e-11,1.806e-11,1.795e-11,5.098e-12,5.127e-12,9.36129729162e-11,3.30629920941e-10,67.3,-35.7,62.7,-34.3,67.3,-35.7,62.7,-34.3,0.49379362249384084,0.49078602014199574,0.49224438377544244,0.49504451855957105),
  #(67,7500,7.66545439362e-12,2.75643285283e-11,1.362e-11,1.365e-11,3.768e-12,3.784e-12,6.92911627297e-11,2.49117762144e-10,68.4,-36.0,64.0,-34.7,68.3,-36.0,64.0,-34.7,0.4941168795755896,0.4952052427464609,0.49155598696616437,0.4936432735350228),
  #(68,7600,5.66439235221e-12,2.07948421711e-11,1.023e-11,1.026e-11,2.777e-12,2.788e-12,5.11971014053e-11,1.87937494389e-10,69.7,-36.4,65.1,-35.0,69.7,-36.4,65.1,-35.1,0.4919489129000134,0.4933915783337378,0.4902555874182224,0.4921975432920432),
  #(69,7700,4.14771251067e-12,1.55617199508e-11,7.666e-12,7.722e-12,2.041e-12,2.045e-12,3.74851015939e-11,1.40603743095e-10,70.8,-36.8,66.0,-35.3,70.9,-36.8,66.0,-35.3,0.4926190693725925,0.4962176433205268,0.4920784636711254,0.49304285066509135),
  #(70,7800,3.04760251067e-12,1.17337892152e-11,5.742e-12,5.767e-12,1.493e-12,1.498e-12,2.75388821615e-11,1.06026765151e-10,72.5,-37.2,67.3,-35.7,72.5,-37.2,67.3,-35.8,0.4893559867738027,0.49148658581060956,0.4898932832522741,0.4915339171546595),
  #(71,7900,2.2071130323e-12,8.78713892191e-12,4.302e-12,4.293e-12,1.088e-12,1.091e-12,1.9943417573e-11,7.93942661017e-11,74.1,-37.7,68.6,-36.2,73.8,-37.7,68.5,-36.1,0.4895791495083025,0.48855492534615125,0.49295164501213207,0.49431088668036405),
  #(72,8000,1.5949044765e-12,6.50245945722e-12,3.193e-12,3.205e-12,7.86e-13,7.924e-13,1.44091666822e-11,5.87437926244e-11,75.0,-38.0,69.9,-36.5,75.2,-38.1,69.8,-36.5,0.4910449686010199,0.4928904241673251,0.492819483286465,0.4968322627941411),
]


sigxsec = {}
sigxsec['GbuToWW']  = {
    'theo': table_Gbulk_ggF,
    'lgdTheo': "G_{Bulk}#rightarrowWW, #tilde{k} = 0.5" 
}
sigxsec['RadToWW']  = {
    'theo': table_Rad_ggF,
    'lgdTheo': "Rad#rightarrowWW, #Lambda_{R}= 3 TeV, kl = 35"
}
sigxsec['ZprToWW']  = {
    'theo': table_HVT_modelB,
    'lgdTheo': "Z'#rightarrowWW, HVT model B",
}
sigxsec['WprToWZ']  = {
    'theo': table_HVT_modelB,
    'lgdTheo': "W'#rightarrowWZ, HVT model B",
}
sigxsec['WprToWH']  = {
    'theo': table_HVT_modelB,
    'lgdTheo': "W'#rightarrowWH, HVT model B",
}
sigxsec['VBFGbuToWW']  = {
    'theo': table_Gbulk_VBF,
    'lgdTheo': "G_{Bulk}#rightarrowWW, #tilde{k} = 0.5"
}
sigxsec['VBFRadToWW']  = {
    'theo': table_Rad_VBF,
    'lgdTheo': "Rad#rightarrowWW, #Lambda_{R}= 3 TeV, kl = 35"
}
sigxsec['VBFZprToWW']  = {
    'theo': table_HVT_modelC,
    'lgdTheo': "Z'#rightarrowWW, HVT model C, c_{H}=3",
}
sigxsec['VBFWprToWZ']  = {
    'theo': table_HVT_modelC,
    'lgdTheo': "W'#rightarrowWZ, HVT model C, c_{H}=3",
}


plots = {}
plots['generic']  = { 
    'lgdL':0.48, 'lgdR':0.92, 'lgdD':0.67, 'lgdU':0.88,
    'blind':0, 'grid':0,
    'titleX':"m_{X} (GeV)",
    'titleY':"#sigma #times #bf{#it{#Beta}} (pb)",
    'thl':0,
}
plots['GbuToWW']  = { 
    'lgdL':0.48, 'lgdR':0.92, 'lgdD':0.67, 'lgdU':0.88,
    'blind':0, 'grid':0,
    'titleX':"m_{G_{Bulk}} (GeV)",
    #'titleY':"#sigma #times #bf{#it{#Beta}}(G_{Bulk}#rightarrowWW) (pb)",
    'titleY':"#sigma #times #bf{#it{#Beta}}(ggF G_{Bulk}#rightarrowWW) (pb)",
    'thl':1,
}
plots['RadToWW']  = { 
    'lgdL':0.38, 'lgdR':0.85, 'lgdD':0.67, 'lgdU':0.88,
    'blind':0, 'grid':0,
    'titleX':"m_{Rad} (GeV)",
    #'titleY':"#sigma #times #bf{#it{#Beta}}(Rad#rightarrowWW) (pb)",
    'titleY':"#sigma #times #bf{#it{#Beta}}(ggF Rad#rightarrowWW) (pb)",
    'thl':1,
}
plots['ZprToWW']  = { 
    'lgdL':0.48, 'lgdR':0.92, 'lgdD':0.67, 'lgdU':0.88,
    'blind':0, 'grid':0,
    'titleX':"m_{Z'} (GeV)",
    #'titleY':"#sigma #times #bf{#it{#Beta}}(Z'#rightarrowWW) (pb)",
    'titleY':"#sigma #times #bf{#it{#Beta}}(DY Z'#rightarrowWW) (pb)",
    'thl':1,
}
plots['WprToWZ']  = { 
    'lgdL':0.48, 'lgdR':0.92, 'lgdD':0.67, 'lgdU':0.88,
    'blind':0, 'grid':0,
    'titleX':"m_{W'} (GeV)",
    #'titleY':"#sigma #times #bf{#it{#Beta}}(W'#rightarrowWZ) (pb)",
    'titleY':"#sigma #times #bf{#it{#Beta}}(DY W'#rightarrowWZ) (pb)",
    'thl':1,
}
plots['WprToWH']  = { 
    'lgdL':0.48, 'lgdR':0.92, 'lgdD':0.67, 'lgdU':0.88,
    'blind':0, 'grid':0,
    'titleX':"m_{W'} (GeV)",
    #'titleY':"#sigma #times #bf{#it{#Beta}}(W'#rightarrowWH) (pb)",
    'titleY':"#sigma #times #bf{#it{#Beta}}(DY W'#rightarrowWH) (pb)",
    'thl':1,
}
plots['VBFGbuToWW']  = { 
    'lgdL':0.48, 'lgdR':0.92, 'lgdD':0.67, 'lgdU':0.88,
    'blind':0, 'grid':0,
    'titleX':"m_{G_{Bulk}} (GeV)",
    'titleY':"#sigma #times #bf{#it{#Beta}}(VBF G_{Bulk}#rightarrowWW) (pb)",
    'thl':1,
}
plots['VBFRadToWW']  = { 
    'lgdL':0.38, 'lgdR':0.85, 'lgdD':0.67, 'lgdU':0.88,
    'blind':0, 'grid':0,
    'titleX':"m_{Rad} (GeV)",
    'titleY':"#sigma #times #bf{#it{#Beta}}(VBF Rad#rightarrowWW) (pb)",
    'thl':1,
}
plots['VBFZprToWW']  = { 
    'lgdL':0.38, 'lgdR':0.85, 'lgdD':0.67, 'lgdU':0.88,
    'blind':0, 'grid':0,
    'titleX':"m_{Z'} (GeV)",
    'titleY':"#sigma #times #bf{#it{#Beta}}(VBF Z'#rightarrowWW) (pb)",
    'thl':1,
}
plots['VBFWprToWZ']  = { 
    'lgdL':0.38, 'lgdR':0.85, 'lgdD':0.67, 'lgdU':0.88,
    'blind':0, 'grid':0,
    'titleX':"m_{W'} (GeV)",
    'titleY':"#sigma #times #bf{#it{#Beta}}(VBF W'#rightarrowWZ) (pb)",
    'thl':1,
}


sig = options.signal
plot = plots[sig]
drawTheo = drawTheo and plot['thl']
blind = options.blind==1 or plot['blind']

setTDRStyle()
style=gROOT.GetStyle("tdrStyle").Clone()
style.SetPadLeftMargin(0.14)
style.SetPadRightMargin(0.04)
style.SetGridColor(14)
style.cd()

c=ROOT.TCanvas("c","c",500,500)
c.cd()
c.UseCurrentStyle()

frame=c.DrawFrame(options.minX,options.minY,options.maxX,options.maxY)
frame.GetXaxis().SetTitle(plot['titleX'])#options.titleX)
frame.GetYaxis().SetTitle(plot['titleY'])#options.titleY)
frame.GetXaxis().SetTitleOffset(1.15)
frame.GetYaxis().SetTitleOffset(1.35)
frame.GetXaxis().SetTitleSize(0.05)
frame.GetYaxis().SetTitleSize(0.05)
frame.GetYaxis().SetNdivisions(10)
frame.Draw()
c.Draw()
c.SetLogy(options.log)
if plot['grid']:
  c.SetGrid()

cmsLabel(c,options.period)

f = ROOT.TFile(options.input)
limit = f.Get("limit")
#f.Close()
data = {}

for event in limit:
    if float(event.mh)<options.minX or float(event.mh)>options.maxX:
        continue
    
    if not (event.mh in data.keys()):
        data[event.mh]={}

    if event.quantileExpected<0:            
        data[event.mh]['obs']=event.limit
    if event.quantileExpected>0.02 and event.quantileExpected<0.03:            
        data[event.mh]['-2sigma']=event.limit
    if event.quantileExpected>0.15 and event.quantileExpected<0.17:            
        data[event.mh]['-1sigma']=event.limit
    if event.quantileExpected>0.49 and event.quantileExpected<0.51:            
        data[event.mh]['exp']=event.limit
    if event.quantileExpected>0.83 and event.quantileExpected<0.85:            
        data[event.mh]['+1sigma']=event.limit
    if event.quantileExpected>0.974 and event.quantileExpected<0.976:            
        data[event.mh]['+2sigma']=event.limit

lineExp = ROOT.TGraph()
lineExp.SetName("limit_exp")
band68 = ROOT.TGraphAsymmErrors()
band68.SetName("band68")
band95 = ROOT.TGraphAsymmErrors()
band95.SetName("band95")
lineObs = ROOT.TGraph()
lineObs.SetName("limit_obs")
line_plus1 = ROOT.TGraph()
line_plus1.SetName("line_plus1")
line_plus2 = ROOT.TGraph()
line_plus2.SetName("line_plus2")
line_minus1 = ROOT.TGraph()
line_minus1.SetName("line_minus1")
line_minus2 = ROOT.TGraph()
line_minus2.SetName("line_minus2")

N=0
for mass,info in data.iteritems():
    print mass, info

    if not ('exp' in info.keys() and '+1sigma' in info.keys() and '+2sigma' in info.keys() and '-1sigma' in info.keys() and '-2sigma' in info.keys() and 'obs' in info.keys()):
        print 'Incomplete file'
        continue

    if mass%50!=0: continue

    lineExp.SetPoint(N,mass,info['exp'])
    band68.SetPoint(N,mass,info['exp'])
    band95.SetPoint(N,mass,info['exp'])
    band68.SetPointError(N,0.0,0.0,info['exp']-info['-1sigma'],info['+1sigma']-info['exp'])
    band95.SetPointError(N,0.0,0.0,info['exp']-info['-2sigma'],info['+2sigma']-info['exp'])
    line_plus1.SetPoint(N,mass,info['+1sigma'])
    line_plus2.SetPoint(N,mass,info['+2sigma'])
    line_minus1.SetPoint(N,mass,info['-1sigma'])
    line_minus2.SetPoint(N,mass,info['-2sigma'])
    if not blind:
        lineObs.SetPoint(N,mass,info['obs'])

    N=N+1

lineExp.Sort()
band68.Sort()
band95.Sort()
if not blind:
    lineObs.Sort()
line_plus1.Sort()    
line_plus2.Sort()    
line_minus1.Sort()    
line_minus2.Sort()    

band68.SetFillColor(ROOT.kGreen+1)
#band68.SetLineWidth(3)
#band68.SetLineColor(ROOT.kBlue)
#band68.SetLineStyle(7)
#band68.SetMarkerStyle(0)
band95.SetFillColor(ROOT.kOrange)
line_plus1.SetLineWidth(1)
line_plus1.SetLineColor(ROOT.kGreen+1)    
line_plus2.SetLineWidth(1)
line_plus2.SetLineColor(ROOT.kOrange-2)
line_minus1.SetLineWidth(1)
line_minus1.SetLineColor(ROOT.kGreen+1)
line_minus2.SetLineWidth(1)
line_minus2.SetLineColor(ROOT.kOrange-2)
lineExp.SetLineWidth(2)
lineExp.SetLineColor(ROOT.kBlue)
lineExp.SetLineStyle(7)
lineExp.SetMarkerStyle(0)
if not blind:
    lineObs.SetLineWidth(2)
    lineObs.SetLineColor(ROOT.kBlack)
    lineObs.SetMarkerSize(0.6)
    lineObs.SetMarkerStyle(20)
    lineObs.SetMarkerColor(ROOT.kBlack)

band95.Draw("3same")
band68.Draw("3same")
#band68.Draw("XLsame")
#line_plus1.Draw("Lsame")
#line_plus2.Draw("Lsame")
#line_minus1.Draw("Lsame")
#line_minus2.Draw("Lsame")

c.Update()
c.RedrawAxis("g")

lineExp.Draw("Lsame")
if not blind:
    lineObs.Draw("PLsame")

gPad.Update()
#p=ROOT.TPad("p","p",0.,0.,1.,1.); p.SetFillStyle(0); p.Draw(); p.cd()
#box = ROOT.TBox(plot['lgdL'],plot['lgdD']-0.01-drawTheo*0.06-(not blind)*0.06,plot['lgdR'],plot['lgdU']+0.01+drawTheo*0.02)
#box.SetFillColor(ROOT.kWhite)
#box.Draw()
lgd = ROOT.TLegend(plot['lgdL'],plot['lgdD']-drawTheo*0.06-(not blind)*0.06,plot['lgdR'],plot['lgdU']-drawTheo*0.06)
lgd.SetFillStyle(0)
lgd.SetBorderSize(0)
lgd.SetTextFont(42)
lgd.SetTextSize(0.036)
lgd.SetHeader("95% CL upper limits")
if not blind:
    lgd.AddEntry(lineObs,"Observed","lp")
lgd.AddEntry(lineExp,"Median expected","l")
lgd.AddEntry(band68,"68% expected","f")
lgd.AddEntry(band95,"95% expected","f")
lgd.Draw()

if drawTheo:
    c.cd()
    bandTh = ROOT.TGraphAsymmErrors()
    bandTh.SetName("bandTh")
    M=0
    if sig=="GbuToWW":
        for mass,xsec,brww,full,pdf,scale in sigxsec[sig]['theo']:
            xsecbr=xsec*brww
            print 'Mass',mass,' xsec_theo',xsec,' BR',brww,' Product',xsecbr
            bandTh.SetPoint(M,mass,xsecbr)
            absunc=xsecbr*math.sqrt(pdf*pdf+scale*scale)
            bandTh.SetPointError(M,0.0,0.0,absunc,absunc)
            M=M+1
    elif sig=="RadToWW":
        for mass,xsec,brww,pdf,scale,alphsS,full in sigxsec[sig]['theo']:
            xsecbr=xsec*brww
            print 'Mass',mass,' xsec_theo',xsec,' BR',brww,' Product',xsecbr
            bandTh.SetPoint(M,mass,xsecbr)
            bandTh.SetPointError(M,0.0,0.0,xsecbr*full/100,xsecbr*full/100)
            M=M+1
    elif sig=="ZprToWW":
        for mass,Mplus,g,gv,ch,cq,cl,c3,cvvw,cvvhh,cvvv,total_widthV0,BRWW,BRhZ,BRuu,BRdd,BRll,BRnunu,BRbb,BRtt,total_widthV,BRZW,BRWGam,BRWh,BRud,BRus,BRlnu,BRtb,CXp,CX0,CXm,PDFWpr,ScaleWpr,PDFZpr,ScaleZpr in sigxsec[sig]['theo']:
            xsecbr=CX0*BRWW
            print 'Mass',mass,' xsec_theo',CX0,' BR',BRWW,' Product',xsecbr
            bandTh.SetPoint(M,mass,xsecbr)
            absunc=xsecbr*math.sqrt(PDFZpr*PDFZpr+ScaleZpr*ScaleZpr)
            bandTh.SetPointError(M,0.0,0.0,absunc,absunc)
            M=M+1
    elif sig=="WprToWZ":
        for mass,Mplus,g,gv,ch,cq,cl,c3,cvvw,cvvhh,cvvv,total_widthV0,BRWW,BRhZ,BRuu,BRdd,BRll,BRnunu,BRbb,BRtt,total_widthV,BRZW,BRWGam,BRWh,BRud,BRus,BRlnu,BRtb,CXp,CX0,CXm,PDFWpr,ScaleWpr,PDFZpr,ScaleZpr in sigxsec[sig]['theo']:
            xsecbr=(CXp+CXm)*BRZW
            print 'Mass',mass,' xsec_theo',(CXp+CXm),' BR',BRZW,' Product',xsecbr
            bandTh.SetPoint(M,mass,xsecbr)
            absunc=xsecbr*math.sqrt(PDFWpr*PDFWpr+ScaleWpr*ScaleWpr)
            bandTh.SetPointError(M,0.0,0.0,absunc,absunc)
            M=M+1
    elif sig=="WprToWH":
        for mass,Mplus,g,gv,ch,cq,cl,c3,cvvw,cvvhh,cvvv,total_widthV0,BRWW,BRhZ,BRuu,BRdd,BRll,BRnunu,BRbb,BRtt,total_widthV,BRZW,BRWGam,BRWh,BRud,BRus,BRlnu,BRtb,CXp,CX0,CXm,PDFWpr,ScaleWpr,PDFZpr,ScaleZpr in sigxsec[sig]['theo']:
            xsecbr=(CXp+CXm)*BRWh
            print 'Mass',mass,' xsec_theo',(CXp+CXm),' BR',BRWh,' Product',xsecbr
            bandTh.SetPoint(M,mass,xsecbr)
            absunc=xsecbr*math.sqrt(PDFWpr*PDFWpr+ScaleWpr*ScaleWpr)
            bandTh.SetPointError(M,0.0,0.0,absunc,absunc)
            M=M+1
    elif sig=="VBFGbuToWW":
        for mass,xsec,brww,scale,pdf,alphsS,full in sigxsec[sig]['theo']:
            xsecbr=xsec*brww
            print 'Mass',mass,' xsec_theo',xsec,' BR',brww,' Product',xsecbr
            bandTh.SetPoint(M,mass,xsecbr)
            bandTh.SetPointError(M,0.0,0.0,xsecbr*full/100,xsecbr*full/100)
            M=M+1
    elif sig=="VBFRadToWW":
        for mass,xsec,brww,QCDScaleUp,QCDScaleDown,PDFas,fullUp,fullDown in sigxsec[sig]['theo']:
            xsecbr=xsec*brww
            print 'Mass',mass,' xsec_theo',xsec,' BR',brww,' Product',xsecbr
            bandTh.SetPoint(M,mass,xsecbr)
            bandTh.SetPointError(M,0.0,0.0,-xsecbr*fullDown/100,xsecbr*fullUp/100)
            M=M+1
    elif sig=="VBFZprToWW":
        for N,mass,Zprime_cH1,Wprime_cH1,WprimeToWZ,WprimeToWH,ZprimeToWW,ZprimeToZH,Zprime_cH3,Wprime_cH3,ZprimeUp,ZprimeDown,WprimeUp,WprimeDown,Zprime3Up,Zprime3Down,Wprime3Up,Wprime3Down,BrWprimeToWZ,BrWprimeToWH,BrZprimeToWW,BrZprimeToZH in sigxsec[sig]['theo']:
            xsecbr=Zprime_cH3*BrZprimeToWW
            print 'Mass',mass,' xsec_theo',Zprime_cH3,' BR',BrZprimeToWW,' Product',xsecbr
            bandTh.SetPoint(M,mass,xsecbr)
            bandTh.SetPointError(M,0.0,0.0,-xsecbr*Zprime3Down/100.,xsecbr*Zprime3Up/100.)
            M=M+1
    elif sig=="VBFWprToWZ":
        for N,mass,Zprime_cH1,Wprime_cH1,WprimeToWZ,WprimeToWH,ZprimeToWW,ZprimeToZH,Zprime_cH3,Wprime_cH3,ZprimeUp,ZprimeDown,WprimeUp,WprimeDown,Zprime3Up,Zprime3Down,Wprime3Up,Wprime3Down,BrWprimeToWZ,BrWprimeToWH,BrZprimeToWW,BrZprimeToZH in sigxsec[sig]['theo']:
            xsecbr=Wprime_cH3*BrWprimeToWZ
            print 'Mass',mass,' xsec_theo',Wprime_cH3,' BR',BrWprimeToWZ,' Product',xsecbr
            bandTh.SetPoint(M,mass,xsecbr)
            bandTh.SetPointError(M,0.0,0.0,-xsecbr*Wprime3Down/100.,xsecbr*Wprime3Up/100.)
            M=M+1
    bandTh.Sort()
    bandTh.SetFillColor(ROOT.kRed)
    bandTh.SetFillStyle(3013)
    bandTh.SetLineWidth(3)
    bandTh.SetLineColor(ROOT.kRed)
    bandTh.SetMarkerStyle(0)
    bandTh.Draw("3Lsame")
    lgdTh = ROOT.TLegend(plot['lgdL'],plot['lgdU']-0.02,plot['lgdR'],plot['lgdU']+0.02)
    lgdTh.SetFillStyle(0)
    lgdTh.SetBorderSize(0)
    lgdTh.SetTextFont(42)
    lgdTh.SetTextSize(0.036)
    lgdTh.AddEntry(bandTh,sigxsec[sig]['lgdTheo'],"fl")
    lgdTh.Draw()

c.Update()
c.RedrawAxis()

saveCanvas(c,options.output)

#'''
fout=ROOT.TFile(options.output+".root","RECREATE")
fout.cd()
c.Write()
lineExp.Write()
band68.Write()
band95.Write()
lineObs.Write()
line_plus1.Write()    
line_plus2.Write()    
line_minus1.Write()    
line_minus2.Write()    
fout.Close()
#'''

